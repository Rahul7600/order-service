name: CI Pipeline

on:
  push:
    branches:
      - master
  pull_request:

env:
  VERSION: ${{ github.run_number }}
  # SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
  #SONAR_HOST_URL: http://15.236.186.247:9000
  #COMPONENT_KEY: com.codedecode:order
  #COVERAGE_THRESHOLD: 80
  DOCKER_IMAGE: rahul7600/order-service

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up AdoptOpenJDK 11
        uses: actions/setup-java@v4
        with:
          distribution: adopt
          java-version: 11

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Build with Maven
        run: mvn clean package -DskipTests

      - name: Run Tests
        run: mvn test

      # --- SonarQube Analysis (commented out) ---
      # - name: SonarQube Analysis
      #   run: |
      #     mvn clean org.jacoco:jacoco-maven-plugin:prepare-agent install sonar:sonar \
      #       -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
      #       -Dsonar.login=${{ env.SONAR_TOKEN }}

      # - name: Check Code Coverage
      #   run: |
      #     response=$(curl -s -H "Authorization: Bearer $SONAR_TOKEN" \
      #       "${SONAR_HOST_URL}/api/measures/component?component=${COMPONENT_KEY}&metricKeys=coverage")
      #     coverage=$(echo "$response" | jq -r '.component.measures[0].value')
      #     echo "Coverage: $coverage"
      #     cov_int=$(printf "%.0f" $coverage)
      #     if [ "$cov_int" -lt "${COVERAGE_THRESHOLD}" ]; then
      #       echo "‚ùå Coverage ($coverage%) is below threshold ($COVERAGE_THRESHOLD%)."
      #       exit 1
      #     fi

      - name: Log in to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}

      - name: Build and Push Docker Image
        run: |
          docker build -t $DOCKER_IMAGE:${VERSION} .
          docker push $DOCKER_IMAGE:${VERSION}

      # --- GitOps Repo Update (commented out) ---
      # - name: Checkout GitOps Repo
      #   uses: actions/checkout@v4
      #   with:
      #     repository: udemy-dev-withK8s-AWS-codedecode/deployment-folder
      #     token: ${{ secrets.GIT_SSH_TOKEN }}
      #     path: deployment-folder

      # - name: Update Image Tag
      #   run: |
      #     cd deployment-folder
      #     sed -i "s|image:.*|image: ${DOCKER_IMAGE}:${VERSION}|" aws/order-manifest.yml
      #     git config user.name "github-actions"
      #     git config user.email "github-actions@github.com"
      #     git add aws/order-manifest.yml
      #     git commit -m "Update image tag to ${VERSION}"
      #     git push origin master
